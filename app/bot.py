import os
import sys
from pathlib import Path
import random
import base64
import json
import asyncio
import time
import re
from io import BytesIO
import requests

# A√±adir el directorio donde se encuentra whatsapp_chatbot_python al PYTHONPATH
sys.path.append(str(Path(__file__).resolve().parent.parent))

from whatsapp_chatbot_python import GreenAPIBot, Notification
from fastapi import HTTPException
from app.schemas import CedulaRequest
from app.main import get_db, send_message, send_qr_code, obtener_numero_contacto, enviar_contacto, verificar_cedula

API_INSTANCE = os.getenv("API_INSTANCE", "7103942544")
API_TOKEN = os.getenv("API_TOKEN", "1b64dc5c3ccc4d9aa01265ce553b874784d414aa81d64777a0")
NEXT_PUBLIC_API_URL = os.getenv("NEXT_PUBLIC_API_URL", "https://applottobueno.com")
WEBSITE_URL = os.getenv("WEBSITE_URL", "https://applottobueno.com")
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL", "https://t.me/applottobueno")
# Definir la URL interna para la comunicaci√≥n entre servicios Docker
INTERNAL_API_URL = "http://app:8000"

# Constante para el tiempo m√°ximo de inactividad (5 minutos)
MAX_INACTIVITY_TIME_SECONDS = 300

# Diccionario para almacenar el √∫ltimo tiempo de interacci√≥n de cada usuario
user_last_interaction = {}

bot = GreenAPIBot(API_INSTANCE, API_TOKEN)

def extract_cedula(text):
    """
    Extrae el n√∫mero de c√©dula de un texto.
    Busca un n√∫mero que tenga entre 6 y 10 d√≠gitos.
    """
    if not text:
        print("Texto vac√≠o recibido en extract_cedula")
        return None
        
    # Eliminar /start si est√° presente
    text = text.replace("/start", "")
    print(f"Texto a procesar para c√©dula: '{text}'")
    
    # Buscar patrones de c√©dula (n√∫meros de 6-10 d√≠gitos)
    cedula_matches = re.findall(r'\b\d{6,10}\b', text)
    
    if cedula_matches:
        # Tomar el primer n√∫mero que parece una c√©dula
        cedula = cedula_matches[0]
        print(f"C√©dula encontrada con regex: '{cedula}'")
        return cedula
    
    print(f"No se encontr√≥ c√©dula con regex, intentando extraer solo d√≠gitos")
    # Si no encuentra n√∫meros que parezcan c√©dula, intentar limpiar y extraer solo d√≠gitos
    digits_only = ''.join(filter(str.isdigit, text))
    print(f"D√≠gitos extra√≠dos: '{digits_only}', longitud: {len(digits_only)}")
    
    if len(digits_only) >= 6:
        cedula = digits_only[:10]  # Limitar a 10 d√≠gitos m√°ximo
        print(f"C√©dula extra√≠da de d√≠gitos: '{cedula}'")
        return cedula
        
    print(f"No se pudo extraer una c√©dula v√°lida del texto")
    return None

def extract_phone_number(text):
    """
    Extrae un n√∫mero de tel√©fono de un texto y lo formatea para la API.
    El formato final debe ser 584XXXXXXXXX (12 d√≠gitos).
    """
    if not text:
        print(f"Texto vac√≠o recibido en extract_phone_number")
        return None
    
    print(f"Procesando n√∫mero de tel√©fono: '{text}'")
    
    # Eliminar espacios, guiones y par√©ntesis
    text = re.sub(r'[\s\-\(\)]', '', text)
    print(f"Texto limpio sin espacios/guiones: '{text}'")
    
    # Extraer solo los d√≠gitos
    digits_only = ''.join(filter(str.isdigit, text))
    print(f"Solo d√≠gitos: '{digits_only}', longitud: {len(digits_only)}")
    
    # Manejar diferentes formatos comunes en Venezuela
    if len(digits_only) >= 10:
        # Si comienza con 58, verificar que tenga un c√≥digo de operadora v√°lido
        if digits_only.startswith('58'):
            print(f"Detectado n√∫mero que comienza con 58: '{digits_only}'")
            # Verificar que despu√©s del 58 tenga un c√≥digo de operadora v√°lido
            if re.match(r'^58(412|414|416|424|426)', digits_only):
                result = digits_only[:12]  # Tomar solo los primeros 12 d√≠gitos
                print(f"N√∫mero con prefijo internacional 58 v√°lido: '{result}'")
                return result
            else:
                print(f"Prefijo de operadora inv√°lido despu√©s del 58: '{digits_only[2:5] if len(digits_only) > 4 else digits_only[2:]}'")
                return None
        
        # Si comienza con 0, quitar el 0 y agregar 58
        elif digits_only.startswith('0'):
            print(f"Detectado n√∫mero que comienza con 0: '{digits_only}'")
            # Verificar que sea una operadora venezolana v√°lida
            if re.match(r'^0(412|414|416|424|426)', digits_only):
                result = '58' + digits_only[1:11]  # Formato: 58 + 10 d√≠gitos sin el 0
                print(f"N√∫mero con prefijo 0 convertido a: '{result}'")
                return result
            else:
                print(f"Prefijo de operadora inv√°lido despu√©s del 0: '{digits_only[1:4] if len(digits_only) > 3 else digits_only[1:]}'")
                return None
        
        # Si comienza directamente con el c√≥digo de operadora (sin 0)
        elif re.match(r'^(412|414|416|424|426)', digits_only):
            print(f"Detectado n√∫mero que comienza con c√≥digo de operadora: '{digits_only}'")
            if len(digits_only) >= 10:
                result = '58' + digits_only[:10]  # Formato: 58 + 10 d√≠gitos
                print(f"N√∫mero sin prefijo convertido a: '{result}'")
                return result
            else:
                print(f"N√∫mero de operadora sin prefijo demasiado corto: '{digits_only}', longitud: {len(digits_only)}")
                return None
        
        # Intento adicional: si tiene 10 d√≠gitos y no coincide con los patrones anteriores
        elif len(digits_only) == 10:
            # Asumir que los primeros 3 d√≠gitos son el c√≥digo de operadora
            operator_code = digits_only[:3]
            print(f"Intentando procesar n√∫mero de 10 d√≠gitos con c√≥digo de operadora: '{operator_code}'")
            if operator_code in ['412', '414', '416', '424', '426']:
                result = '58' + digits_only
                print(f"N√∫mero de 10 d√≠gitos convertido a: '{result}'")
                return result
            else:
                print(f"C√≥digo de operadora no reconocido: '{operator_code}' (debe ser uno de: 412, 414, 416, 424, 426)")
                return None
        
        # Otros casos no v√°lidos
        else:
            print(f"Formato no reconocido: '{digits_only}', longitud: {len(digits_only)}")
            print("El n√∫mero debe comenzar con: 58, 0 o directamente el c√≥digo de operadora (412, 414, 416, 424, 426)")
            return None
    
    print(f"N√∫mero demasiado corto: '{digits_only}', longitud: {len(digits_only)} (se requieren al menos 10 d√≠gitos)")
    return None

@bot.router.message()
def obtener_cedula(notification: Notification) -> None:
    sender = notification.sender
    message_data = notification.event.get("messageData", {})
    
    # Actualizar tiempo de la √∫ltima interacci√≥n
    user_last_interaction[sender] = time.time()
    
    # Obtener el nombre del remitente
    sender_data = notification.event["senderData"]
    sender_name = sender_data["senderName"]
    
    # Verificar si hay datos de estado para este usuario
    user_state = get_user_state(notification, sender)
    print(f"Estado actual al recibir mensaje: {user_state}")
    
    # Verificar el estado del usuario y dirigir a la funci√≥n correspondiente
    if user_state:
        state_value = user_state.get("state")
        print(f"Estado del usuario: {state_value}")
        
        if state_value == "esperando_telefono":
            print("Procesando n√∫mero de tel√©fono...")
            handle_registro_telefono(notification, sender, message_data)
            return
        elif state_value == "menu_post_registro":
            print("Procesando selecci√≥n del men√∫ post-registro...")
            handle_post_registro_menu(notification, sender, message_data)
            return
        elif state_value == "menu_principal":
            print("Procesando selecci√≥n del men√∫ principal...")
            handle_menu_principal(notification, sender, message_data)
            return
    
    # Si no hay estado o no coincide con ninguno de los anteriores, 
    # procesar como entrada de c√©dula (comportamiento predeterminado)
    
    # Obtener el texto del mensaje
    message_text = None
    
    # Intentar obtener el texto de diferentes estructuras de mensaje
    extended_text_message_data = message_data.get("extendedTextMessageData", {})
    if extended_text_message_data:
        message_text = extended_text_message_data.get("textMessage") or extended_text_message_data.get("text")
    
    if not message_text:
        text_message_data = message_data.get("textMessageData", {})
        if text_message_data:
            message_text = text_message_data.get("textMessage")

    print(f"message_data: {message_data}")
    print(f"Mensaje recibido: {message_text}")

    # Si no hay texto o es solo /start, enviar mensaje de bienvenida
    if not message_text or message_text.strip() == "/start":
        notification.answer(
            f"üëã Hola, {sender_name}. Para validar tu registro, por favor env√≠ame tu n√∫mero de c√©dula."
        )
        return

    # Extraer la c√©dula del mensaje
    cedula = extract_cedula(message_text)
    
    if not cedula:
        notification.answer(
            f"No he podido identificar un n√∫mero de c√©dula v√°lido en tu mensaje. Por favor, env√≠a solo tu n√∫mero de c√©dula (entre 6 y 10 d√≠gitos)."
        )
        notification.answer(
            f"Ejemplo de formato correcto: 12345678"
        )
        # Mostrar el men√∫ principal como alternativa
        show_menu_principal(notification, sender_name)
        notification.state_manager.set_state(sender, {"state": "menu_principal", "nombre": sender_name})
        return

    print(f"Procesando c√©dula: {cedula}")
    db = next(get_db())
    
    try:
        # 1. Primero verificamos si la c√©dula existe en la base de datos de electores
        print(f"Enviando c√©dula {cedula} para verificaci√≥n")
        elector_response = asyncio.run(verificar_cedula(CedulaRequest(numero_cedula=cedula), db))
        print(f"Respuesta de verificaci√≥n de elector: {elector_response}")

        if elector_response.get("elector"):
            elector_data = elector_response.get("elector")
            nombre_completo = f"{elector_data['p_nombre']} {elector_data['s_nombre']} {elector_data['p_apellido']} {elector_data['s_apellido']}"
            print(f"Elector encontrado: {nombre_completo}")
            
            # 2. Luego verificamos si la c√©dula ya tiene un ticket registrado
            try:
                # Usar URL interna para la comunicaci√≥n entre servicios
                ticket_url = f"{INTERNAL_API_URL}/api/tickets/cedula/{cedula}"
                print(f"Verificando ticket para c√©dula {cedula} en URL interna: {ticket_url}")
                response = requests.get(ticket_url)
                print(f"Respuesta al verificar ticket: Status {response.status_code}, Contenido: {response.text[:200]}...")
                
                # Si la respuesta es exitosa, la c√©dula ya tiene un ticket
                if response.status_code == 200:
                    existing_ticket = response.json()
                    print(f"Ticket encontrado: {existing_ticket}")
                    chat_id = existing_ticket["telefono"]

                    qr_code_base64 = existing_ticket["qr_ticket"]
                    qr_buf = BytesIO(base64.b64decode(qr_code_base64))

                    message = f"{nombre_completo}, hoy es tu d√≠a de suerte!\n\n" \
                            f"Desde este momento est√°s participando en el Lotto Bueno y este es tu n√∫mero de ticket {existing_ticket['id']} ¬°El n√∫mero ganador!\n\n" \
                            f"Es importante que guardes nuestro contacto, as√≠ podremos anunciarte que t√∫ eres el afortunado ganador.\n" \
                            f"No pierdas tu n√∫mero de ticket y guarda nuestro contacto, ¬°prep√°rate para celebrar!\n\n" \
                            f"¬°Mucha suerte!\n" \
                            f"Lotto Bueno: ¬°Tu mejor oportunidad de ganar!"

                    notification.answer(message)
                    print(f"Enviando QR code para ticket #{existing_ticket['id']}")
                    send_qr_code(sender, qr_buf)

                    phone_contact = obtener_numero_contacto(db)
                    print(f"phone_contact obtenido: {phone_contact}")
                    if phone_contact:
                        enviar_contacto(sender, phone_contact.split('@')[0], "Lotto", "Bueno", "Lotto Bueno Inc")
                    
                    # Mostrar el men√∫ despu√©s del registro
                    show_post_registro_menu(notification, nombre_completo)
                    
                    # Guardar el estado del usuario como "en men√∫ post-registro"
                    notification.state_manager.set_state(sender, {"state": "menu_post_registro", "nombre": nombre_completo})
                
                # Si la respuesta es 404, la c√©dula no tiene ticket, debemos registrarla
                elif response.status_code == 404:
                    print(f"C√©dula {cedula} est√° registrada en el sistema pero no tiene ticket")
                    notification.answer(f"La c√©dula {cedula} est√° registrada en el sistema pero a√∫n no tiene un ticket de Lotto Bueno.")
                    notification.answer(f"Para completar tu registro, por favor env√≠ame tu n√∫mero de tel√©fono (con formato 04XX-XXXXXXX):")
                    
                    # Guardar informaci√≥n para el registro
                    user_state_data = {
                        "state": "esperando_telefono", 
                        "nombre": nombre_completo,
                        "cedula": cedula
                    }
                    print(f"Guardando estado del usuario: {user_state_data}")
                    notification.state_manager.set_state(sender, user_state_data)
                    
                else:
                    # Otros errores en la API
                    error_message = f"Error al verificar ticket: {response.status_code}"
                    try:
                        error_response = response.json()
                        error_message += f" - Detalle: {error_response.get('detail', response.text)}"
                    except Exception:
                        error_message += f" - Respuesta: {response.text}"
                    
                    print(error_message)
                    raise Exception(error_message)
                    
            except requests.HTTPError as http_err:
                print(f"HTTP error al verificar ticket: {http_err}")
                # Si la API no responde, asumimos que necesitamos registrar al usuario
                notification.answer(f"No pudimos verificar si ya tienes un ticket. Para continuar con el registro, por favor env√≠ame tu n√∫mero de tel√©fono (con formato 04XX-XXXXXXX):")
                
                # Guardar informaci√≥n para el registro
                user_state_data = {
                    "state": "esperando_telefono", 
                    "nombre": nombre_completo,
                    "cedula": cedula
                }
                print(f"Guardando estado del usuario: {user_state_data}")
                notification.state_manager.set_state(sender, user_state_data)
                
            except Exception as err:
                print(f"Error inesperado al verificar ticket: {err}")
                notification.answer(f"Ha ocurrido un error inesperado: {str(err)}")
                notification.answer(f"Por favor, intenta nuevamente m√°s tarde.")
                # Mostrar men√∫ principal como fallback
                show_menu_principal(notification, sender_name)
                notification.state_manager.set_state(sender, {"state": "menu_principal", "nombre": sender_name})
        else:
            print(f"C√©dula {cedula} no registrada en el sistema electoral.")
            notification.answer(f"El n√∫mero de c√©dula {cedula} no est√° registrado en nuestra base de datos.")
            notification.answer("¬øTe gustar√≠a registrarte con esta c√©dula para participar en Lotto Bueno?")
            
            # Iniciar proceso de registro
            user_state_data = {
                "state": "esperando_telefono", 
                "nombre": sender_name,
                "cedula": cedula
            }
            print(f"Guardando estado para c√©dula no registrada: {user_state_data}")
            notification.state_manager.set_state(sender, user_state_data)
            notification.answer("Por favor, env√≠ame tu n√∫mero de tel√©fono (con formato 04XX-XXXXXXX):")
    except Exception as e:
        print(f"Error al verificar c√©dula: {e}")
        notification.answer(f"Ha ocurrido un error al procesar tu solicitud: {str(e)}")
        notification.answer("Por favor intenta nuevamente con solo tu n√∫mero de c√©dula.")
        # Mostrar men√∫ principal como fallback
        show_menu_principal(notification, sender_name)
        notification.state_manager.set_state(sender, {"state": "menu_principal", "nombre": sender_name})

def handle_registro_telefono(notification: Notification, sender: str, message_data: dict):
    """Maneja la entrada del tel√©fono durante el proceso de registro"""
    # Obtener el texto del mensaje
    message_text = None
    
    # Intentar obtener el texto de diferentes estructuras de mensaje
    extended_text_message_data = message_data.get("extendedTextMessageData", {})
    if extended_text_message_data:
        message_text = extended_text_message_data.get("textMessage") or extended_text_message_data.get("text")
    
    if not message_text:
        text_message_data = message_data.get("textMessageData", {})
        if text_message_data:
            message_text = text_message_data.get("textMessage")
    
    print(f"Mensaje de tel√©fono recibido: {message_text}")
    
    # Obtener el estado del usuario
    user_state = get_user_state(notification, sender)
    print(f"Estado del usuario recuperado en handle_registro_telefono: {user_state}")
    
    # Obtener datos del estado
    cedula = user_state.get("cedula")
    nombre = user_state.get("nombre", "Usuario")
    
    if not cedula:
        print(f"No se encontr√≥ c√©dula en el estado: {user_state}")
        notification.answer("No he podido recuperar tus datos de registro. Por favor intenta nuevamente.")
        show_menu_principal(notification, nombre)
        set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
        return
    
    if not message_text:
        notification.answer("No he podido obtener tu mensaje. Por favor, env√≠a tu n√∫mero de tel√©fono (ejemplo: 0414-1234567):")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "esperando_telefono", "nombre": nombre, "cedula": cedula})
        return
    
    print(f"Procesando n√∫mero de tel√©fono: '{message_text}' para c√©dula: {cedula}")
    
    # Extraer el n√∫mero de tel√©fono
    telefono = extract_phone_number(message_text)
    print(f"N√∫mero extra√≠do: {telefono} del texto original: {message_text}")
    
    if not telefono:
        # Intentar extraer de forma m√°s directa para ver si falla el formateo
        digits_only = ''.join(filter(str.isdigit, message_text))
        print(f"Texto despu√©s de filtrar solo d√≠gitos: {digits_only}")
        
        notification.answer("No he podido identificar un n√∫mero de tel√©fono v√°lido. Por favor, env√≠a tu n√∫mero con formato 04XX-XXXXXXX:")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "esperando_telefono", "nombre": nombre, "cedula": cedula})
        return
    
    # Llamar a la API para registrar al usuario
    try:
        notification.answer(f"Estoy procesando tu registro con la c√©dula {cedula} y el tel√©fono {telefono}...")
        
        # Preparar la solicitud a la API
        payload = {
            "cedula": cedula,
            "telefono": telefono,
            "referido_id": 1  # Valor por defecto para registros desde el bot
        }
        
        print(f"Enviando solicitud a la API para generar ticket: {payload}")
        
        try:
            # Usar URL interna para la comunicaci√≥n entre servicios
            response = requests.post(
                f"{INTERNAL_API_URL}/api/generate_tickets",
                json=payload
            )
            print(f"Respuesta de la API: Status: {response.status_code}, Texto: {response.text[:200]}")
            
            # Verificar si hay errores en la respuesta
            if response.status_code != 200:
                error_message = f"Error durante el registro (HTTP {response.status_code})."
                try:
                    error_details = response.json()
                    error_detail = error_details.get("detail", "")
                    error_message += f" Detalle del error: {error_detail}"
                except Exception:
                    error_message += f" Respuesta de la API: {response.text}"
                
                print(f"Error detallado: {error_message}")
                notification.answer(f"Ha ocurrido un error durante el registro. ‚ùå\n\n{error_message}")
                notification.answer("Por favor, intenta nuevamente o contacta a soporte con este mensaje de error.")
                show_menu_principal(notification, nombre)
                set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
                return
                
            # Continuar solo si la respuesta es exitosa
            response.raise_for_status()
            data = response.json()
            print(f"Registro exitoso: {data}")
            
            # Si el registro fue exitoso
            notification.answer(f"¬°Felicidades! Tu registro ha sido completado exitosamente.")
            
            if data.get("qr_code"):
                qr_buf = BytesIO(base64.b64decode(data["qr_code"]))
                send_qr_code(sender, qr_buf)
                print(f"QR Code enviado al usuario")
            else:
                print(f"No se encontr√≥ QR code en la respuesta")
            
            message = f"¬°Bienvenido a Lotto Bueno! Tu ticket ha sido generado.\n\n" \
                    f"Es importante que guardes nuestro contacto, as√≠ podremos anunciarte si eres el afortunado ganador.\n" \
                    f"No pierdas tu ticket y guarda nuestro contacto, ¬°prep√°rate para celebrar!\n\n" \
                    f"¬°Mucha suerte!\n" \
                    f"Lotto Bueno: ¬°Tu mejor oportunidad de ganar!"
                    
            notification.answer(message)
            
            # Obtener un contacto aleatorio para compartir
            db = next(get_db())
            phone_contact = obtener_numero_contacto(db)
            if phone_contact:
                print(f"Enviando contacto: {phone_contact}")
                enviar_contacto(sender, phone_contact.split('@')[0], "Lotto", "Bueno", "Lotto Bueno Inc")
            
            # Mostrar el men√∫ despu√©s del registro
            show_post_registro_menu(notification, nombre)
            
            # Actualizar el estado del usuario
            set_user_state(notification, sender, {"state": "menu_post_registro", "nombre": nombre})
            print(f"Estado actualizado a menu_post_registro despu√©s del registro exitoso")
            
        except requests.exceptions.RequestException as req_err:
            print(f"Error en la solicitud HTTP: {req_err}")
            error_message = f"‚ùå Error al contactar el servidor: {str(req_err)}"
            notification.answer(error_message)
            notification.answer("Por favor, verifica tu conexi√≥n e intenta nuevamente.")
            show_menu_principal(notification, nombre)
            set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
        
    except requests.exceptions.HTTPError as e:
        print(f"Error HTTP al registrar: {e}")
        error_message = f"‚ùå Error durante el registro: {str(e)}"
        try:
            response_text = e.response.text
            error_message += f"\n\nRespuesta del servidor: {response_text}"
        except Exception:
            pass
        notification.answer(error_message)
        show_menu_principal(notification, nombre)
        set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
    except Exception as e:
        print(f"Error inesperado al registrar: {e}")
        error_message = f"‚ùå Error inesperado: {str(e)}"
        notification.answer(error_message)
        notification.answer("Por favor, intenta nuevamente m√°s tarde o contacta a soporte con este mensaje de error.")
        show_menu_principal(notification, nombre)
        set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})

def show_menu_principal(notification: Notification, nombre: str):
    """Muestra el men√∫ principal para usuarios sin c√©dula registrada"""
    menu_message = f"Hola {nombre}, estamos aqu√≠ para ayudarte. ¬øQu√© te gustar√≠a hacer?\n\n" \
                  f"*1.* Registrarme en Lotto Bueno üìù\n" \
                  f"*2.* Visitar nuestro sitio web üåê\n" \
                  f"*3.* Unirme al canal de Telegram üì£\n" \
                  f"*4.* Verificar otra c√©dula üî¢\n" \
                  f"*5.* Finalizar conversaci√≥n üëã\n\n" \
                  f"Responde con el *n√∫mero* de la opci√≥n deseada."
    
    # Enviar con formato de WhatsApp
    notification.answer(menu_message)
    print(f"Men√∫ principal enviado a {notification.sender}")

def handle_menu_principal(notification: Notification, sender: str, message_data: dict):
    """Maneja las opciones del men√∫ principal"""
    # Obtener el texto del mensaje
    message_text = None
    
    extended_text_message_data = message_data.get("extendedTextMessageData", {})
    if extended_text_message_data:
        message_text = extended_text_message_data.get("textMessage") or extended_text_message_data.get("text")
    
    if not message_text:
        text_message_data = message_data.get("textMessageData", {})
        if text_message_data:
            message_text = text_message_data.get("textMessage")
    
    print(f"Mensaje recibido en men√∫ principal: {message_text}")
    
    # Extraer opci√≥n del mensaje - m√°s robusto
    option = None
    if message_text:
        # Intentar encontrar un n√∫mero al principio del mensaje
        match = re.match(r'^[^\d]*(\d+)', message_text)
        if match:
            option = match.group(1)
        # Si no, buscar n√∫meros en cualquier parte
        else:
            for char in message_text:
                if char.isdigit():
                    option = char
                    break
    
    # Obtener el estado y nombre del usuario
    user_state = get_user_state(notification, sender)
    nombre = user_state.get("nombre", "Usuario")
    
    print(f"Opci√≥n seleccionada: {option}")
    
    if option == "1":
        # Opci√≥n 1: Registrarse en Lotto Bueno
        notification.answer("¬°Excelente! Para registrarte en Lotto Bueno, por favor env√≠ame tu n√∫mero de c√©dula:")
        notification.state_manager.delete_state(sender)  # Reiniciar el estado para iniciar el proceso de registro
    elif option == "2":
        # Opci√≥n 2: Visitar sitio web
        notification.answer(f"¬°Excelente! Puedes visitar nuestro sitio web en:\n{WEBSITE_URL}")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
        # Volver a mostrar el men√∫ para permitir al usuario elegir otra opci√≥n
        show_menu_principal(notification, nombre)
    elif option == "3":
        # Opci√≥n 3: Unirse al canal de Telegram
        notification.answer(f"¬°Genial! √önete a nuestro canal de Telegram para recibir noticias y actualizaciones:\n{TELEGRAM_CHANNEL}")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
        # Volver a mostrar el men√∫ para permitir al usuario elegir otra opci√≥n
        show_menu_principal(notification, nombre)
    elif option == "4":
        # Opci√≥n 4: Verificar otra c√©dula
        notification.answer("Por favor, env√≠ame el n√∫mero de c√©dula que deseas verificar:")
        notification.state_manager.delete_state(sender)  # Reiniciar el estado para procesar la nueva c√©dula
    elif option == "5":
        # Opci√≥n 5: Finalizar conversaci√≥n
        notification.answer(f"¬°Gracias por contactarnos, {nombre}! Esperamos verte pronto en Lotto Bueno. ¬°Que tengas un excelente d√≠a! üçÄ")
        notification.state_manager.delete_state(sender)
    else:
        # Opci√≥n no v√°lida
        notification.answer("No he podido entender tu selecci√≥n. Por favor, responde con el n√∫mero de la opci√≥n deseada (1, 2, 3, 4 o 5):")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
        show_menu_principal(notification, nombre)

def show_post_registro_menu(notification: Notification, nombre: str):
    """Muestra el men√∫ de opciones despu√©s del registro"""
    menu_message = f"¬øQu√© te gustar√≠a hacer ahora?\n\n" \
                  f"*1.* Visitar nuestro sitio web üåê\n" \
                  f"*2.* Unirte a nuestro canal de Telegram üì£\n" \
                  f"*3.* Regresar al men√∫ principal üîÑ\n" \
                  f"*4.* Finalizar conversaci√≥n üëã\n\n" \
                  f"Responde con el *n√∫mero* de la opci√≥n deseada."
    
    # Enviar con formato de WhatsApp
    notification.answer(menu_message)
    print(f"Men√∫ post-registro enviado a {notification.sender}")

def handle_post_registro_menu(notification: Notification, sender: str, message_data: dict):
    """Maneja las opciones del men√∫ post-registro"""
    # Obtener el texto del mensaje
    message_text = None
    
    extended_text_message_data = message_data.get("extendedTextMessageData", {})
    if extended_text_message_data:
        message_text = extended_text_message_data.get("textMessage") or extended_text_message_data.get("text")
    
    if not message_text:
        text_message_data = message_data.get("textMessageData", {})
        if text_message_data:
            message_text = text_message_data.get("textMessage")
    
    print(f"Mensaje recibido en men√∫ post-registro: {message_text}")
    
    # Extraer opci√≥n del mensaje - m√°s robusto
    option = None
    if message_text:
        # Intentar encontrar un n√∫mero al principio del mensaje
        match = re.match(r'^[^\d]*(\d+)', message_text)
        if match:
            option = match.group(1)
        # Si no, buscar n√∫meros en cualquier parte
        else:
            for char in message_text:
                if char.isdigit():
                    option = char
                    break
    
    # Obtener el estado y nombre del usuario
    user_state = get_user_state(notification, sender)
    nombre = user_state.get("nombre", "Usuario")
    
    print(f"Opci√≥n seleccionada post-registro: {option}")
    
    if option == "1":
        # Opci√≥n 1: Visitar sitio web
        notification.answer(f"¬°Excelente! Puedes visitar nuestro sitio web en:\n{WEBSITE_URL}")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "menu_post_registro", "nombre": nombre})
        # Volver a mostrar el men√∫ para que el usuario pueda elegir otra opci√≥n
        show_post_registro_menu(notification, nombre)
    elif option == "2":
        # Opci√≥n 2: Unirse al canal de Telegram
        notification.answer(f"¬°Genial! √önete a nuestro canal de Telegram para recibir noticias y actualizaciones:\n{TELEGRAM_CHANNEL}")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "menu_post_registro", "nombre": nombre})
        # Volver a mostrar el men√∫ para que el usuario pueda elegir otra opci√≥n
        show_post_registro_menu(notification, nombre)
    elif option == "3":
        # Opci√≥n 3: Regresar al men√∫ principal
        notification.answer("Regresando al men√∫ principal...")
        show_menu_principal(notification, nombre)
        set_user_state(notification, sender, {"state": "menu_principal", "nombre": nombre})
    elif option == "4":
        # Opci√≥n 4: Finalizar conversaci√≥n
        notification.answer(f"¬°Gracias por registrarte, {nombre}! Estamos emocionados de tenerte como participante en Lotto Bueno. Te notificaremos si eres el ganador. ¬°Buena suerte! üçÄ")
        notification.state_manager.delete_state(sender)
    else:
        # Opci√≥n no v√°lida
        notification.answer("No he podido entender tu selecci√≥n. Por favor, responde con el n√∫mero de la opci√≥n deseada (1, 2, 3 o 4):")
        # Mantener el estado actual
        set_user_state(notification, sender, {"state": "menu_post_registro", "nombre": nombre})
        show_post_registro_menu(notification, nombre)

def check_inactive_users():
    """Verifica y cierra las sesiones inactivas"""
    current_time = time.time()
    inactive_users = []
    
    for sender, last_time in user_last_interaction.items():
        if current_time - last_time > MAX_INACTIVITY_TIME_SECONDS:
            inactive_users.append(sender)
    
    for sender in inactive_users:
        print(f"Usuario inactivo detectado: {sender}")
        try:
            # Eliminar el estado del usuario si existe
            try:
                if hasattr(bot, 'state_manager'):
                    bot.state_manager.delete_state(sender)
                elif hasattr(bot.router, 'state_manager'):
                    bot.router.state_manager.delete_state(sender)
                else:
                    print("No se encontr√≥ state_manager para eliminar el estado")
            except Exception as e:
                print(f"Error al eliminar estado para usuario inactivo {sender}: {e}")
                
            # Eliminar el registro de tiempo de interacci√≥n
            del user_last_interaction[sender]
            
            # Opcional: enviar un mensaje de cierre de sesi√≥n
            try:
                send_message(sender, "Tu sesi√≥n ha finalizado debido a inactividad. Env√≠a cualquier mensaje para comenzar de nuevo.")
                print(f"Mensaje de inactividad enviado a {sender}")
            except Exception as e:
                print(f"Error enviando mensaje de inactividad a {sender}: {e}")
        except Exception as e:
            print(f"Error general manejando usuario inactivo {sender}: {e}")

def inactivity_checker():
    """Funci√≥n para verificar usuarios inactivos peri√≥dicamente"""
    while True:
        try:
            check_inactive_users()
        except Exception as e:
            print(f"Error en verificador de inactividad: {e}")
        time.sleep(60)  # Verificar cada minuto

# Agregar una funci√≥n para serializar y deserializar el estado
def set_user_state(notification, sender, state_dict):
    """Guarda el estado del usuario de forma compatible con la biblioteca"""
    try:
        # Intenta guardar directamente como diccionario (forma preferida)
        notification.state_manager.set_state(sender, state_dict)
        print(f"Estado guardado exitosamente como diccionario: {state_dict}")
    except Exception as e:
        print(f"Error al guardar estado como diccionario: {e}")
        # Intentar otras formas de guardar estado si la primera falla
        try:
            serialized_state = json.dumps(state_dict)
            notification.state_manager.set_state(sender, serialized_state)
            print(f"Estado guardado como JSON string: {serialized_state}")
        except Exception as e2:
            print(f"Error al guardar estado serializado: {e2}")
            # √öltimo intento: crear un objeto simple
            try:
                class SimpleState:
                    pass
                
                state_obj = SimpleState()
                for key, value in state_dict.items():
                    setattr(state_obj, key, value)
                
                notification.state_manager.set_state(sender, state_obj)
                print(f"Estado guardado como objeto con atributos: {state_obj.__dict__}")
            except Exception as e3:
                print(f"Error al guardar estado como objeto: {e3}")

def get_user_state(notification, sender):
    """Obtiene el estado del usuario manejando diferentes formatos posibles"""
    try:
        state = notification.state_manager.get_state(sender)
        
        # Si es None, retornar un diccionario vac√≠o
        if state is None:
            print("No se encontr√≥ estado para el usuario")
            return {}
        
        print(f"Estado raw recibido: {state}")
            
        # Si es un objeto con atributo name (caso detectado en logs)
        if hasattr(state, "name") and isinstance(state.name, dict):
            result = state.name
            print(f"Estado obtenido con estructura name: {result}")
            return result
            
        # Si es un objeto, intentar convertirlo a diccionario
        if hasattr(state, "__dict__"):
            result = state.__dict__
            print(f"Estado obtenido como objeto y convertido a diccionario: {result}")
            return result
            
        # Si es un string, intentar parsearlo como JSON
        if isinstance(state, str):
            try:
                result = json.loads(state)
                print(f"Estado obtenido como string JSON y parseado: {result}")
                return result
            except json.JSONDecodeError as e:
                print(f"Error al parsear estado JSON: {e}")
                return {"raw_state": state}
                
        # Si es un diccionario, retornarlo directamente
        if isinstance(state, dict):
            print(f"Estado obtenido como diccionario: {state}")
            return state
            
        # √öltimo recurso: crear un diccionario con los atributos del objeto
        result = {}
        for attr in dir(state):
            if not attr.startswith('_') and not callable(getattr(state, attr)):
                result[attr] = getattr(state, attr)
        print(f"Estado obtenido como objeto desconocido y convertido a: {result}")
        return result
    except Exception as e:
        print(f"Error al obtener estado del usuario: {e}")
        return {}

if __name__ == "__main__":
    # Iniciar un hilo que verifique los usuarios inactivos cada minuto
    import threading
    
    threading.Thread(target=inactivity_checker, daemon=True).start()
    
    # Iniciar el bot
    bot.run_forever()
